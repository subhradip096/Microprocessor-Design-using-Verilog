module btp_alu(
  input [7:0] opr1, opr2,
  input [3:0] flags,
  output [7:0] out,
  input [3:0] mode,
  input e
);
  
  reg [7:0] out_alu;
  reg carry_out;

  always@(*) begin
    case (mode)
      4'b0000: {carry_out, out_alu} = opr1 + opr2;
      4'b0001: begin
        out_alu = opr1 - opr2;
        carry_out = ~out_alu[7];
      end
      4'b0010: out_alu = opr1;
      4'b0011: out_alu = opr2;
      4'b0100: out_alu = opr1 & opr2;
      4'b0101: out_alu = opr1 | opr2;
      4'b0110: out_alu = opr1 ^ opr2;
      4'b0111: begin
        out_alu = opr2 - opr1;
        carry_out = ~out_alu[7];
      end
      4'b1000: out_alu = opr1 + 8'h1;
      4'b1001: begin
        out_alu = opr2 - 8'h1;
        carry_out = ~out_alu[7];
      end
      4'b1010: out_alu = (opr2 << opr1[2:0])|(opr2 >> 8-opr1[2:0]); //rotate left
      4'b1011: out_alu = (opr2 >> opr1[2:0])| ( opr2 << opr1[2:0]); //rotate right
  	  4'b1100: out_alu = opr2 << opr1[2:0];
      4'b1101: out_alu = opr2 >> opr1[2:0];
      4'b1110: out_alu = opr2 >>> opr1[2:0];
      4'b1111: begin //2's complement
        out_alu = 8'h0 - opr2;
        carry_out = ~out_alu[7];
      end
      default: out_alu = opr2;
    endcase
  end
  
  wire Z,S;
  
  assign Z = (out_alu == 0)? 1'b1: 1'b0;
  assign S = out_alu[7];
  assign flags = {Z,carry_out,S};
  assign out = out_alu;
  
endmodule